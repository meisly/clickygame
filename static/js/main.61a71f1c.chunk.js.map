{"version":3,"sources":["components/Header/index.js","components/ImageCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","src","width","height","alt","score","ImageCard","onClick","handleClick","clicked","name","image","Wrapper","elems","total","size","Math","ceil","sqrt","document","documentElement","style","setProperty","children","App","state","all","images","id","includes","alert","initializeGame","randomizedImg","randomizeImages","newClicked","newScore","push","setState","length","imageArr","array","i","j","floor","random","this","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"03DAuBeA,MAnBf,SAAgBC,GACd,OACE,6BACA,yBAAKC,UAAU,8BACf,uBAAGA,UAAU,eAAeC,KAAK,KAC/B,yBAAKC,IAAI,6CAA6CC,MAAM,KAAKC,OAAO,KAAKJ,UAAU,2BAA2BK,IAAI,KACtH,4CAIF,yBAAKL,UAAU,eACb,wBAAIA,UAAU,cAAd,UAAmCD,EAAMO,W,MCEhCC,MAXf,SAAmBR,GAEjB,OACE,yBAAKC,UAAU,OAAOQ,QAAST,EAAMU,YAAaC,QAAQ,SACxD,yBAAKV,UAAU,iBACb,yBAAKK,IAAKN,EAAMY,KAAMT,IAAKH,EAAMa,W,MCI1BC,MAZf,SAAiBd,GAEf,IAAIe,EAAQf,EAAMgB,MAEdC,EAAO,KADA,IAAMC,KAAKC,KAAKD,KAAKE,KAAKL,KAMrC,OAJAM,SAASC,gBAAgBC,MACtBC,YAAY,eADf,UACkCP,EADlC,OAIO,yBAAKhB,UAAU,WAAWD,EAAMyB,W,OCiE1BC,G,iNAlEbC,MAAQ,CACNC,IAAKC,EACLlB,QAAS,GACTJ,MAAO,G,EAsBTG,YAAc,SAACoB,GACb,GAAI,EAAKH,MAAMhB,QAAQoB,SAASD,GAC9BE,MAAM,6BACN,EAAKC,qBACA,CACL,IAAIC,EAAgB,EAAKC,gBAAgB,EAAKR,MAAMC,KAChDQ,EAAa,EAAKT,MAAMhB,QACxB0B,EAAW,EAAKV,MAAMpB,MAAQ,EAElC6B,EAAWE,KAAKR,GAEhB,EAAKS,SAAS,CACZX,IAAKM,EACLvB,QAASyB,EACT7B,MAAO8B,IAELA,IAAa,EAAKV,MAAMC,IAAIY,SAC9BR,MAAM,2CACN,EAAKC,oB,EAIXE,gBAAkB,SAACM,GAEjB,IADA,IAAIC,EAAQD,EACHE,EAAID,EAAMF,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAI1B,KAAK2B,MAAM3B,KAAK4B,UAAYH,EAAI,IADC,EAElB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAME,GAFwB,KAI3C,OAAOF,G,EAGTT,eAAiB,WACf,EAAKM,SAAS,CACZX,IAAKC,EACLlB,QAAS,GACTJ,MAAO,K,wEAtDD,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQA,MAAOwC,KAAKpB,MAAMpB,QAC1B,kBAAC,EAAD,CAASS,MAAO+B,KAAKpB,MAAMC,IAAIY,QAC7B,wBAAIvC,UAAU,SAAd,+CACC8C,KAAKpB,MAAMC,IAAIoB,KAAI,SAAAnC,GAAK,OACvB,kBAAC,EAAD,CACEoC,IAAKpC,EAAMiB,GACXjB,MAAOA,EAAMA,MACbH,YAAa,kBAAM,EAAKA,YAAYG,EAAMiB,gB,GAnBtCoB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASsC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61a71f1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div>\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n    <a className=\"navbar-brand\" href=\"/\">\r\n      <img src=\"/docs/4.3/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"/>\r\n      <h1>\r\n        Clicky Game\r\n      </h1> \r\n    </a>\r\n    <div className=\"left buttom\">\r\n      <h3 className=\"text-white\">Score: {props.score}</h3>\r\n    </div>\r\n    </nav>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction ImageCard(props) {\r\n\r\n  return (\r\n    <div className=\"card\" onClick={props.handleClick} clicked=\"false\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  //resize images based on size of img collection\r\n  let elems = props.total;\r\n  let cols = 1.5 * Math.ceil(Math.sqrt(elems));\r\n  let size = 100/cols;\r\n  document.documentElement.style\r\n    .setProperty('--image-size', `${size}vw`);\r\n\r\n\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport Header from \"./components/Header\"\r\nimport ImageCard from \"./components/ImageCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport images from \"./friends.json\";\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n  state = {\r\n    all: images,\r\n    clicked: [],\r\n    score: 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header score={this.state.score} />\r\n        <Wrapper total={this.state.all.length}>\r\n          <h1 className=\"title\">Click each image once and only once to win!</h1>\r\n          {this.state.all.map(image => (\r\n            <ImageCard\r\n              key={image.id}\r\n              image={image.image}\r\n              handleClick={() => this.handleClick(image.id)}\r\n            />\r\n          )\r\n          )}\r\n\r\n        </Wrapper>\r\n      </div>\r\n    )\r\n  };\r\n  handleClick = (id) => {\r\n    if (this.state.clicked.includes(id)) {\r\n      alert(\"dang, y'all fucked up now\")\r\n      this.initializeGame();\r\n    } else {\r\n      let randomizedImg = this.randomizeImages(this.state.all);\r\n      let newClicked = this.state.clicked;\r\n      let newScore = this.state.score + 1;\r\n\r\n      newClicked.push(id);\r\n\r\n      this.setState({\r\n        all: randomizedImg,\r\n        clicked: newClicked,\r\n        score: newScore\r\n      });\r\n      if (newScore === this.state.all.length) {\r\n        alert(\"Congratulations!  You won a free iphone\")\r\n        this.initializeGame();\r\n      }\r\n    }\r\n  }\r\n  randomizeImages = (imageArr) => {\r\n    let array = imageArr;\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  initializeGame = () => {\r\n    this.setState({\r\n      all: images,\r\n      clicked: [],\r\n      score: 0\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}